// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/humanbelnik/kinoswap/core/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// RoomRepository is an autogenerated mock type for the RoomRepository type
type RoomRepository struct {
	mock.Mock
}

// AppendPreference provides a mock function with given fields: ctx, roomID, preference
func (_m *RoomRepository) AppendPreference(ctx context.Context, roomID model.RoomID, preference model.Preference) error {
	ret := _m.Called(ctx, roomID, preference)

	if len(ret) == 0 {
		panic("no return value specified for AppendPreference")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RoomID, model.Preference) error); ok {
		r0 = rf(ctx, roomID, preference)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateAndAquire provides a mock function with given fields: ctx, roomID
func (_m *RoomRepository) CreateAndAquire(ctx context.Context, roomID model.RoomID) error {
	ret := _m.Called(ctx, roomID)

	if len(ret) == 0 {
		panic("no return value specified for CreateAndAquire")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RoomID) error); ok {
		r0 = rf(ctx, roomID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAndAcquire provides a mock function with given fields: ctx
func (_m *RoomRepository) FindAndAcquire(ctx context.Context) (model.RoomID, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindAndAcquire")
	}

	var r0 model.RoomID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (model.RoomID, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) model.RoomID); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(model.RoomID)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsExistsRoomID provides a mock function with given fields: ctx, roomID
func (_m *RoomRepository) IsExistsRoomID(ctx context.Context, roomID model.RoomID) (bool, error) {
	ret := _m.Called(ctx, roomID)

	if len(ret) == 0 {
		panic("no return value specified for IsExistsRoomID")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RoomID) (bool, error)); ok {
		return rf(ctx, roomID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.RoomID) bool); ok {
		r0 = rf(ctx, roomID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.RoomID) error); ok {
		r1 = rf(ctx, roomID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsRoomAcquired provides a mock function with given fields: ctx, roomID
func (_m *RoomRepository) IsRoomAcquired(ctx context.Context, roomID model.RoomID) (bool, error) {
	ret := _m.Called(ctx, roomID)

	if len(ret) == 0 {
		panic("no return value specified for IsRoomAcquired")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RoomID) (bool, error)); ok {
		return rf(ctx, roomID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.RoomID) bool); ok {
		r0 = rf(ctx, roomID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.RoomID) error); ok {
		r1 = rf(ctx, roomID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseRoom provides a mock function with given fields: ctx, roomID
func (_m *RoomRepository) ReleaseRoom(ctx context.Context, roomID model.RoomID) error {
	ret := _m.Called(ctx, roomID)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseRoom")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RoomID) error); ok {
		r0 = rf(ctx, roomID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TryAcquire provides a mock function with given fields: ctx, roomID
func (_m *RoomRepository) TryAcquire(ctx context.Context, roomID model.RoomID) error {
	ret := _m.Called(ctx, roomID)

	if len(ret) == 0 {
		panic("no return value specified for TryAcquire")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RoomID) error); ok {
		r0 = rf(ctx, roomID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRoomRepository creates a new instance of RoomRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoomRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoomRepository {
	mock := &RoomRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
