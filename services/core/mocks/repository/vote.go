// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/humanbelnik/kinoswap/core/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// VoteRepository is an autogenerated mock type for the VoteRepository type
type VoteRepository struct {
	mock.Mock
}

// AddVote provides a mock function with given fields: ctx, roomID, results
func (_m *VoteRepository) AddVote(ctx context.Context, roomID model.RoomID, results model.VoteResult) error {
	ret := _m.Called(ctx, roomID, results)

	if len(ret) == 0 {
		panic("no return value specified for AddVote")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RoomID, model.VoteResult) error); ok {
		r0 = rf(ctx, roomID, results)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoadResults provides a mock function with given fields: ctx, roomID
func (_m *VoteRepository) LoadResults(ctx context.Context, roomID model.RoomID) ([]*model.MovieMeta, error) {
	ret := _m.Called(ctx, roomID)

	if len(ret) == 0 {
		panic("no return value specified for LoadResults")
	}

	var r0 []*model.MovieMeta
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.RoomID) ([]*model.MovieMeta, error)); ok {
		return rf(ctx, roomID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.RoomID) []*model.MovieMeta); ok {
		r0 = rf(ctx, roomID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.MovieMeta)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.RoomID) error); ok {
		r1 = rf(ctx, roomID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVoteRepository creates a new instance of VoteRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVoteRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VoteRepository {
	mock := &VoteRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
