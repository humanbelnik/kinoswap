// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/humanbelnik/kinoswap/core/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// Embedder is an autogenerated mock type for the Embedder type
type Embedder struct {
	mock.Mock
}

// BuildPreferenceEmbedding provides a mock function with given fields: ctx, p
func (_m *Embedder) BuildPreferenceEmbedding(ctx context.Context, p model.Preference) (model.Embedding, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for BuildPreferenceEmbedding")
	}

	var r0 model.Embedding
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Preference) (model.Embedding, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Preference) model.Embedding); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Embedding)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Preference) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEmbedder creates a new instance of Embedder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmbedder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Embedder {
	mock := &Embedder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
